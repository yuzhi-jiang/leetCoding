并查集的模板是偷来的~ 如果还没学习并查集的同学可以去参考ylb大佬的讲解

[827.最大人工岛](https://leetcode.cn/problems/making-a-large-island/solutions/1830855/by-lcbin-f4c1/)

第一次遍历 ： 将所有的 1 合并

我们这里在查询前还需要一次遍历， 因为我们将所有的 1 合并的时候并没有合并到了同一个节点上。

但我们想一想 真的需要这次遍历吗？

假如我们在对每一个节点查找它的根节点的时候， 把他的根节点放在一个哈希表内，
在下一次查找到这个根节点在哈希表内的话， 我们跳过， 因为这个岛的根节点已经被计数过了。

还有一点需要注意， 如果一个格子是水， 那么我们在第一次遍历合并完土地后， 他的根节点不会改变， 依旧是他自己， 那么当我们进行查找的时候， 如果一个节点的根节点是它自己， 并且这个节点代表的是'水'， 那么我们跳过， 他并不是一个岛屿。

* []

```python
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        def find(x) :
            if p[x] != x :
                p[x] = find(p[x])
            return p[x]
        def union(x, y) : 
            px, py = find(x), find(y) 
            if px == py :
                return 
            p[px] = py
        leny = len(grid)
        lenx = len(grid[0])
        p = list(range(lenx * leny))
        for i, row in enumerate(grid) :
            for j, v in enumerate(row) :
                if v == '1' :
                    for a, b in [[0, -1], [-1, 0]] :
                        x, y = i + a, j + b
                        if 0 <= x < leny and 0 <= y < lenx and grid[x][y] == '1':
                            union(i * lenx + j, x * lenx + y)
        ans = 0
        havesee = dict()
        for i in range(lenx * leny) :
            if find(i) not in havesee and grid[i // lenx][i % lenx] != '0':
                havesee[p[i]] = 1
                ans += 1
        return ans
```

