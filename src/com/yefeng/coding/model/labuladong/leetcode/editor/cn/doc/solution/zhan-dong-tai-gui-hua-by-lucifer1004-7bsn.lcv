一道经典的表达式处理问题，我们使用操作符栈+操作数栈的经典双栈方式来进行模拟。

注意这里的“操作数”实际上是一个二元的状态$(p, q)$，其中$p$代表将当前“操作数”对应的范围变为$0$所需的最小操作次数，$q$代表将当前的“操作数”对应的范围变为$1$所需的最小操作次数。

显然，单个的$0$对应于状态$(0,1)$，而单个的$1$对应于状态$(1,0)$。

本题中，除括号外所有运算符优先级相同，需要从左到右进行运算，因此我们每得到一个新的“操作数”（这里既包括由单个的$0$或$1$带来的“操作数”，也包括`)`导致的出栈情形——对于上一层来说，这一层带来了一个新的“操作数”），就应当在上一个操作符不为`(`时将当前的“操作数”与上一个“操作数”进行一次“运算”，合并为一个新的“操作数”。

下面我们需要考虑如何实现“运算”。

假设待合并的两个状态为$(p_1,q_1)$和$(p_2,q_2)$。

如果当前操作符为`&`，则：

- 我们如果要得到$0$，只需要有一边为$0$，代价为$\min(p_1,p_2)$。

- 我们如果要得到$1$，需要左右两边同时为$1$，代价为$q_1+q_2$；或者将操作符变为`|`，同时只需要左右有一边为$1$，代价为$\min(q_1,q_2)+1$。

如果当前操作符为`|`，则：

- 我们如果要得到$0$，需要左右两边同时为$0$，代价为$p_1+p_2$；或者将操作符变为`&`，同时只需要左右有一边为$0$，代价为$\min(p_1,p_2)+1$。
- 我们如果要得到$1$，只需要有一边为$1$，代价为$\min(q_1,q_2)$。

这样我们就实现了操作数之间的运算。

所有操作执行完毕后，我们的操作数栈将只包含一个元素。这个元素必定包含一个零值（对应于表达式原本的值）和一个非零值。而这个非零值就是我们要寻找的答案。

### 复杂度分析

- 时间复杂度$\mathcal{O}(|S|)$。
- 空间复杂度$\mathcal{O}(|S|)$。

### 参考代码（Python 3）

* python

```python
class Solution:
    def minOperationsToFlip(self, expression: str) -> int:
        states = []
        ops = []
                
        for c in expression:
            if c in '01)':
                if c == '0':
                    states.append((0, 1))
                elif c == '1':
                    states.append((1, 0))
                else:
                    assert(ops[-1] == '(')
                    ops.pop()
                    
                if len(ops) > 0 and ops[-1] != '(':
                    op = ops.pop()
                    p2, q2 = states.pop()
                    p1, q1 = states.pop()
                    if op == '&':
                        states.append((min(p1, p2), min(q1 + q2, 1 + min(q1, q2))))
                    else:
                        states.append((min(p1 + p2, 1 + min(p1, p2)), min(q1, q2)))
            else:
                ops.append(c)
        
        return max(states[-1])
```

